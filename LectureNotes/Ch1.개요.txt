190201. It's only the beginning.

src, jar referenced by http://jcip.net/

pdf(ENG) file: 
http://www.periodicooficial.oaxaca.gob.mx/files/2011/05/EXT02-2011-05-19.pdf

--------------------------------------------------------
개요. 
--------------------------------------------------------
운영체제는 프로세스마다 메모리, 파일핸들, 보안권한 등의 자원 할당.
프로세스끼리는 서로 통신을 할수잇는데, 소켓, 시그널 핸들러, 공유메모리, 세마포어, 파일등의 큰단위의 다양한 통신수단이 제공된다.

운영체제의 목적성:
1. 자원활용 - waiting 시간동안에 일처리.
2. 공정성 - 여러 사용자와 프로그램에 동일권한. 
3. 편의성 - 프로그램간 조율.
-> 스레드 탄생. CPU 스케쥴의 기본단위는 스레드.

장점: 빠른 인터페이스 시작, 높은 자원활용도와 처리율, JVM 단순화.
1. 멀티프로세스 활용
2. 단순한 모델링 - 복잡,비동기 -> 단순, 동기적 작업흐름. cf) servlet, RMI.
3. 단순한 비동기 이벤트 처리 - NPTL. 넌블로킹I/O 활용X
4. 더 빠르게 반응하는 UI - GUI -> AWT, 스윙. EDT로 이벤트 쓰레드 해들링.

위험성:
1. 안전성 위해 요소 - 병행성으로 인한 값중복사태. 다른 스레드간 통신방식보다 데이터 공유가 쉬워서 생기는 해프닝. @UnsafeSequence -> @ThreadSafe, @Immutable
2. 활동성(liveness) 위험 - deadlock, starvation, livelock. <- 단원 10장 참고
3. 성능위험 - 서비스시간(공수), 반응성, 처리율, 자원소모, 규모에 따른 확장성.

활용성:
1. 타이머 - timerTask, 데이터 객체 내부에 스레드 안정성 캡슐화.
2. servlet, JSP - servlet framework: 웹앱을 배치하고 원격 hrrp클라이언트에서 오는 요청 분배하기위한 기본기능. 동시 요청, 호출 가능해야함. 
3. 원격 메소드 호출(RMI) - 다른 JVM의 객체 메소드 호출. marshaled, unmarshaled. 공유와 원격 객체 자체의 호출에도 정상작동 해야함.
4. 스윙, AWT - gui(비동기) -> 스윙, AWT(사용자 발생 이벤트 처리, 그래픽갱신 스레드)

